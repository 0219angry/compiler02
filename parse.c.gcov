        -:    0:Source:parse.c
        -:    0:Graph:parse.gcno
        -:    0:Data:parse.gcda
        -:    0:Runs:66
        -:    1:#include "token-list.h"
        -:    2:#include "parse.h"
        -:    3:
        -:    4:char *token_str[NUMOFTOKEN+1] = {
        -:    5:	"",
        -:    6:	"NAME", "program", "var", "array", "of", "begin", "end", "if", "then",
        -:    7:	 "else", "procedure", "return", "call", "while", "do", "not", "or", 
        -:    8:	"div", "and", "char", "integer", "boolean", "readln", "writeln", "true",
        -:    9:	 "false", "NUMBER", "STRING", "+", "-", "*", "=", "<>", "<", "<=", ">", 
        -:   10:	">=", "(", ")", "[", "]", ":=", ".", ",", ":", ";", "read","write", "break"
        -:   11:};
        -:   12:
        -:   13:extern int token;
        -:   14:int indent_count;
        -:   15:
       66:   16:int parse_program(void){
       66:   17:  indent_count = 0;
       66:   18:  if(token != TPROGRAM) return(error("Keyword 'program' is not found"));
       64:   19:  printf("%s ",token_str[token]);
       64:   20:  token = Scan();
       64:   21:  if(token != TNAME) return(error("Promgram name is not found"));
       62:   22:  printf("%s", string_attr);
       62:   23:  token = Scan();
       62:   24:  if(token != TSEMI) return(error("Semicolon is not found"));
       60:   25:  printf("%s" ,token_str[token]);
       60:   26:  indent_count++;
       60:   27:  print_indent(indent_count);
       60:   28:  token = Scan();
       60:   29:  if(parse_block() == ERROR) return(ERROR);
        4:   30:  if(token != TDOT) return(error("Period is not found at the end of program"));
        2:   31:  printf("%s" ,token_str[token]);
        2:   32:  token = Scan();
        2:   33:  indent_count--;
        2:   34:  print_indent(indent_count);
        2:   35:  return(NORMAL);
        -:   36:}
        -:   37:
       60:   38:int parse_block(void){
      137:   39:  while(token == TVAR || token == TPROCEDURE){
      104:   40:    if(token == TVAR){
       58:   41:      if(parse_variable_declaration() == ERROR) return(ERROR);
       46:   42:    }else if(token == TPROCEDURE){
       46:   43:      if(parse_subprogram_declaration() == ERROR) return(ERROR);
        -:   44:    }
       77:   45:    print_indent(indent_count);
        -:   46:  }
       33:   47:  indent_count--;
       33:   48:  print_indent(indent_count);
       33:   49:  if(parse_compound_statement() == ERROR) return(ERROR);
        4:   50:  return(NORMAL);
        -:   51:}
        -:   52:
       94:   53:int parse_variable_declaration(void){
      94*:   54:  if(token != TVAR) return(error("Keyword 'var' is not found"));
       94:   55:  printf("%s" ,token_str[token]);
       94:   56:  indent_count++;
       94:   57:  token = Scan();
      347:   58:  while(token == TNAME){
      264:   59:    print_indent(indent_count);
     264*:   60:    if(parse_variable_names() == ERROR) return(ERROR);
      264:   61:    if(token != TCOLON) return(error("Colon is not found"));
      262:   62:    printf(" %s " ,token_str[token]);
      262:   63:    token = Scan();
      262:   64:    if(parse_type() == ERROR) return(ERROR);
      254:   65:    if(token != TSEMI) return(error("Semicolon is not found"));
      253:   66:    printf("%s" ,token_str[token]);
      253:   67:    token = Scan();
        -:   68:  }
       83:   69:  indent_count--;
       83:   70:  return(NORMAL);
        -:   71:}
        -:   72:
      344:   73:int parse_variable_names(void){
     344*:   74:  if(parse_variable_name() == ERROR) return(ERROR);
      482:   75:  while(token == TCOMMA){
      138:   76:    printf(" %s " ,token_str[token]);
        -:   77:    
      138:   78:    token = Scan();
     138*:   79:    if(parse_variable_name() == ERROR) return(ERROR);
        -:   80:  }
      344:   81:  return(NORMAL);
        -:   82:}
        -:   83:
     1780:   84:int parse_variable_name(void){
    1780*:   85:  if(token != TNAME) return(error("Variable name is not found"));
     1780:   86:  printf("%s", string_attr);
     1780:   87:  token = Scan();
     1780:   88:  return(NORMAL);
        -:   89:}
        -:   90:
      340:   91:int parse_type(void){
      340:   92:  switch(token){
      284:   93:    case TINTEGER:
        -:   94:    case TBOOLEAN:
        -:   95:    case TCHAR:
     284*:   96:      if(parse_standard_type() == ERROR) return(ERROR);
      284:   97:      break;
       55:   98:    case TARRAY:
       55:   99:      if(parse_array_type() == ERROR) return(ERROR);
       48:  100:      break;
        1:  101:    default:
        1:  102:      return(error("type is not found"));
        -:  103:  }
      332:  104:  return(NORMAL);
        -:  105:}
        -:  106:
      354:  107:int parse_standard_type(void){
      354:  108:  switch (token){
      134:  109:  case TINTEGER:
      134:  110:    printf("%s" ,token_str[token]);
      134:  111:    token = Scan();
      134:  112:    return(NORMAL);
        -:  113:    break;
       56:  114:  case TBOOLEAN:
       56:  115:    printf("%s" ,token_str[token]);
       56:  116:    token = Scan();
       56:  117:    return(NORMAL);
        -:  118:    break;
      164:  119:  case TCHAR:
      164:  120:    printf("%s" ,token_str[token]);
      164:  121:    token = Scan();
      164:  122:    return(NORMAL);
        -:  123:    break;
    #####:  124:  default:
    #####:  125:    return(error("Standard type is not found"));
        -:  126:    break;
        -:  127:  }
        -:  128:}
        -:  129:
       55:  130:int parse_array_type(void){
      55*:  131:  if(token != TARRAY) return(error("Keyword 'array' is not found"));
       55:  132:  printf("%s" ,token_str[token]);
       55:  133:  token = Scan();
       55:  134:  if(token != TLSQPAREN) return(error("Left squere parenthese is not found"));
       54:  135:  printf("%s" ,token_str[token]);
       54:  136:  token = Scan();
       54:  137:  if(token != TNUMBER) return(error("Unsigned integer is not found"));
       52:  138:  printf("%d" ,num_attr);
       52:  139:  token = Scan();
       52:  140:  if(token != TRSQPAREN) return(error("Left squere parenthese is not found"));
       50:  141:  printf("%s " ,token_str[token]);
       50:  142:  token = Scan();
       50:  143:  if(token != TOF) return(error("Keyword 'of' is not found"));
       48:  144:  printf("%s " ,token_str[token]);
       48:  145:  token = Scan();
      48*:  146:  if(parse_standard_type() == ERROR) return(ERROR);
       48:  147:  return(NORMAL);
        -:  148:}
        -:  149:
       46:  150:int parse_subprogram_declaration(void){
       46:  151:  indent_count++;
      46*:  152:  if(token !=TPROCEDURE) return(error("keyword 'procedure' is not found"));
       46:  153:  printf("%s ",token_str[token]);
       46:  154:  token = Scan();
       46:  155:  if(parse_procedure_name() == ERROR) return(ERROR);
       44:  156:  if(token == TLPAREN){
       42:  157:    if(parse_formal_parameters() == ERROR) return(ERROR);
        -:  158:  }
       40:  159:  if(token != TSEMI) return(error("Semicolon is not found"));
       36:  160:  printf("%s",token_str[token]);
       36:  161:  print_indent(indent_count);
       36:  162:  token = Scan();
       36:  163:  if(token == TVAR){
      36*:  164:    if(parse_variable_declaration() == ERROR) return(ERROR);
        -:  165:  }
       36:  166:  if(parse_compound_statement() == ERROR) return(ERROR);
       32:  167:  if(token != TSEMI) return(error("Semicolon is not found"));
       30:  168:  printf("%s",token_str[token]);
       30:  169:  token = Scan();
       30:  170:  indent_count--;
       30:  171:  return(NORMAL);
        -:  172:}
        -:  173:
       70:  174:int parse_procedure_name(void){
       70:  175:  if(token != TNAME) return(error("procedure name is not found"));
       68:  176:  printf("%s",string_attr);
       68:  177:  token = Scan();
       68:  178:  return(NORMAL);
        -:  179:}
        -:  180:
       42:  181:int parse_formal_parameters(void){
      42*:  182:  if(token != TLPAREN) return(error("Left parenthese is not found"));
       42:  183:  printf("%s ",token_str[token]);
       42:  184:  token = Scan();
        -:  185:  while(1){
      80*:  186:    if(parse_variable_names() == ERROR) return(ERROR);
       80:  187:    if(token != TCOLON) return(error("Colon is not found"));
       78:  188:    printf(" %s ",token_str[token]);
       78:  189:    token = Scan();
      78*:  190:    if(parse_type() == ERROR) return(ERROR);
       78:  191:    if(token == TRPAREN) break;
       40:  192:    if(token != TSEMI) return(error("Semicolon is not found"));
       38:  193:    printf("%s ",token_str[token]);
       38:  194:    token = Scan();
        -:  195:  }
       38:  196:  printf("%s",token_str[token]);
       38:  197:  token = Scan();
       38:  198:  return(NORMAL);
        -:  199:}
        -:  200:
       95:  201:int parse_compound_statement(void){
       95:  202:  if(token != TBEGIN) return(error("Keyword 'begin' is not found"));
       90:  203:  printf("%s",token_str[token]);
       90:  204:  indent_count++;
       90:  205:  print_indent(indent_count);
       90:  206:  token = Scan();
       90:  207:  if(parse_statement() == ERROR) return(ERROR);
      322:  208:  while(token == TSEMI){
      258:  209:    printf("%s",token_str[token]);
      258:  210:    print_indent(indent_count);
      258:  211:    token = Scan();
      258:  212:    if(parse_statement() == ERROR) return(ERROR);
        -:  213:  }
       64:  214:  indent_count--;
       64:  215:  print_indent(indent_count);
       64:  216:  if(token != TEND) return(error("Keyword 'end' is not found"));
       62:  217:  printf("%s",token_str[token]);
       62:  218:  token = Scan();
       62:  219:  return(NORMAL);
        -:  220:}
        -:  221:
      682:  222:int parse_statement(void){
      682:  223:  switch(token){
      306:  224:    case TNAME:
      306:  225:      if(parse_assignment_statement() == ERROR) return(ERROR);
      296:  226:      break;
      172:  227:    case TIF:
      172:  228:      if(parse_condition_statement() == ERROR) return(ERROR);
      156:  229:      break;
       26:  230:    case TWHILE:
       26:  231:      if(parse_iteration_statement() == ERROR) return(ERROR);
       24:  232:      break;
       24:  233:    case TBREAK:
      24*:  234:      if(parse_exit_statement() == ERROR) return(ERROR);
       24:  235:      break;
       24:  236:    case TCALL:
       24:  237:      if(parse_call_statement() == ERROR) return(ERROR);
       22:  238:      break;
        8:  239:    case TRETURN:
       8*:  240:      if(parse_return_statement() == ERROR) return(ERROR);
        8:  241:      break;
       32:  242:    case TREAD:
        -:  243:    case TREADLN:
       32:  244:      if(parse_input_statement() == ERROR) return(ERROR);
       28:  245:      break;
       24:  246:    case TWRITE:
        -:  247:    case TWRITELN:
       24:  248:      if(parse_output_statement() == ERROR) return(ERROR);
       18:  249:      break;
       26:  250:    case TBEGIN:
      26*:  251:      if(parse_compound_statement() == ERROR) return(ERROR);
       26:  252:      break;
       40:  253:    default:
      40*:  254:      if(parse_empty_statement() == ERROR) return(ERROR);
        -:  255:  }
      642:  256:  return(NORMAL);
        -:  257:}
        -:  258:
      172:  259:int parse_condition_statement(void){
     172*:  260:  if(token != TIF) return(error("Keyword 'if' is not found"));
      172:  261:  printf("%s ",token_str[token]);
      172:  262:  token = Scan();
     172*:  263:  if(parse_expression() == ERROR) return(ERROR);
      172:  264:  if(token != TTHEN) return(error("Keyword 'then' is not found"));
      170:  265:  printf(" %s",token_str[token]);
      170:  266:  token = Scan();
      170:  267:  indent_count++;
      170:  268:  print_indent(indent_count);
      170:  269:  if(parse_statement() == ERROR) return(ERROR);
        -:  270:
      166:  271:  if(token == TELSE){
      140:  272:    indent_count--;
      140:  273:    print_indent(indent_count);
      140:  274:    printf("%s",token_str[token]);
      140:  275:    token = Scan();
      140:  276:    indent_count++;
      140:  277:    print_indent(indent_count);
      140:  278:    if(parse_statement() == ERROR) return(ERROR);
      130:  279:    indent_count--;
        -:  280:  }
      156:  281:  return(NORMAL);
        -:  282:}
        -:  283:
       26:  284:int parse_iteration_statement(void){
      26*:  285:  if(token != TWHILE) return(error("Keyword 'while' is not found"));
       26:  286:  printf("%s ",token_str[token]);
       26:  287:  token = Scan();
      26*:  288:  if(parse_expression() == ERROR) return(ERROR);
       26:  289:  if(token != TDO) return(error("Keyword 'do' is not found"));
       24:  290:  printf(" %s ",token_str[token]);
       24:  291:  token = Scan();
       24:  292:  indent_count++;
       24:  293:  print_indent(indent_count);
      24*:  294:  if(parse_statement() == ERROR) return(ERROR);
       24:  295:  indent_count--;
       24:  296:  return(NORMAL);
        -:  297:}
        -:  298:
       24:  299:int parse_exit_statement(void){
      24*:  300:  if(token != TBREAK) return(error("Keyword 'break' is not found"));
       24:  301:  printf("%s",token_str[token]);
       24:  302:  token = Scan();
       24:  303:  return(NORMAL);
        -:  304:}
        -:  305:
       24:  306:int parse_call_statement(void){
      24*:  307:  if(token != TCALL) return(error("Keyword 'call' is not found"));
       24:  308:  printf("%s ",token_str[token]);
       24:  309:  token = Scan();
      24*:  310:  if(parse_procedure_name() == ERROR) return(ERROR);
       24:  311:  if(token == TLPAREN){
       24:  312:    printf("%s ",token_str[token]);
       24:  313:    token = Scan();
      24*:  314:    if(parse_expressions() == ERROR) return(ERROR);
       24:  315:    if(token != TRPAREN) return(error("Right parenthese is not found"));
       22:  316:    printf(" %s",token_str[token]);
       22:  317:    token = Scan();
        -:  318:  }
       22:  319:  return(NORMAL);
        -:  320:}
        -:  321:
       24:  322:int parse_expressions(void){
      24*:  323:  if(parse_expression() == ERROR) return(ERROR);
       48:  324:  while(token == TCOMMA){
       24:  325:      printf(" %s ",token_str[token]);
       24:  326:      token = Scan();
      24*:  327:      if(parse_expression() == ERROR) return(ERROR);
        -:  328:    }
       24:  329:    return(NORMAL);
        -:  330:}
        -:  331:
        8:  332:int parse_return_statement(void){
       8*:  333:  if(token != TRETURN) return(error("Keyword 'return' is not found"));
        8:  334:  printf("%s",token_str[token]);
        8:  335:  token = Scan();
        8:  336:  print_indent(indent_count);
        8:  337:  return(NORMAL);
        -:  338:}
        -:  339:
      306:  340:int parse_assignment_statement(void){
     306*:  341:  if(parse_left_part() == ERROR) return(ERROR);
      306:  342:  if(token != TASSIGN) return(error("Assignment symbol is not found"));
      302:  343:  printf(" %s ",token_str[token]);
      302:  344:  token = Scan();
      302:  345:  if(parse_expression() == ERROR) return(ERROR);
      296:  346:  return(NORMAL);
        -:  347:}
        -:  348:
      306:  349:int parse_left_part(void){
     306*:  350:  if(parse_variable() == ERROR) return(ERROR);
      306:  351:  return(NORMAL);
        -:  352:}
        -:  353:
     1298:  354:int parse_variable(void){
    1298*:  355:  if(parse_variable_name() == ERROR) return(ERROR);
     1298:  356:  if(token == TLSQPAREN){
       18:  357:    printf("%s ",token_str[token]);
       18:  358:    token = Scan();
      18*:  359:    if(parse_expression() == ERROR) return(ERROR);
       18:  360:    if(token != TRSQPAREN) return(error("Right squere parenthese is not found"));
       16:  361:    printf("%s ",token_str[token]);
       16:  362:    token = Scan();
        -:  363:  }
     1296:  364:  return(NORMAL);
        -:  365:}
        -:  366:
      638:  367:int parse_expression(void){
      638:  368:  if(parse_simple_expression() == ERROR) return(ERROR);
      802:  369:  while(token == TEQUAL || token == TNOTEQ || token == TLE || token == TLEEQ || token == TGR || token == TGREQ){
     172*:  370:    if(parse_relational_operator() == ERROR) return(ERROR);
     172*:  371:    if(parse_simple_expression() == ERROR) return(ERROR);
        -:  372:  }
      630:  373:  return(NORMAL);
        -:  374:}
        -:  375:
      810:  376:int parse_simple_expression(void){
      810:  377:  if(token == TPLUS){
    #####:  378:    printf("%s",token_str[token]);
    #####:  379:    token = Scan();
      810:  380:  }else if(token == TMINUS){
       28:  381:    printf("%s",token_str[token]);
       28:  382:    token = Scan();
        -:  383:  }
      810:  384:  if(parse_term() == ERROR) return(ERROR);
      976:  385:  while(token == TPLUS || token == TMINUS || token == TOR){
     174*:  386:    if(parse_additive_operator() == ERROR) return(ERROR);
      174:  387:    if(parse_term() == ERROR) return(ERROR);
        -:  388:  }
      802:  389:  return(NORMAL);
        -:  390:}
        -:  391:
      984:  392:int parse_term(void){
      984:  393:  if(parse_factor() == ERROR) return(ERROR);
     1060:  394:  while(token == TSTAR || token == TDIV || token == TAND){
      84*:  395:    if(parse_multiplicative_operator() == ERROR) return(ERROR);
      84*:  396:    if(parse_factor() == ERROR) return(ERROR);
        -:  397:  }
      976:  398:  return(NORMAL);
        -:  399:}
        -:  400:
     1094:  401:int parse_factor(void){
     1094:  402:  switch(token){
      928:  403:    case TNAME:
     928*:  404:      if(parse_variable() == ERROR) return(ERROR);
      928:  405:      break;
       88:  406:    case TNUMBER:
        -:  407:    case TTRUE:
        -:  408:    case TFALSE:
        -:  409:    case TSTRING:
      88*:  410:      if(parse_constant() == ERROR) return(ERROR);
       88:  411:      break;
       28:  412:    case TLPAREN:
       28:  413:      printf("%s ",token_str[token]);
       28:  414:      token = Scan();
      28*:  415:      if(parse_expression() == ERROR) return(ERROR);
       28:  416:      if(token != TRPAREN) return(error("Right parenthese is not found"));
       26:  417:      printf(" %s",token_str[token]);
       26:  418:      token = Scan();
       26:  419:      break;
       26:  420:    case TNOT:
       26:  421:      printf("%s ",token_str[token]);
       26:  422:      token = Scan();
      26*:  423:      if(parse_factor() == ERROR) return(ERROR);
       26:  424:      break;
       22:  425:    case TINTEGER:
        -:  426:    case TBOOLEAN:
        -:  427:    case TCHAR:
      22*:  428:      if(parse_standard_type() == ERROR) return(ERROR);
       22:  429:      if(token != TLPAREN) return(error("Left paranthese is not found"));
       20:  430:      printf("%s ",token_str[token]);
       20:  431:      token = Scan();
      20*:  432:      if(parse_expression() == ERROR) return(ERROR);
       20:  433:      if(token != TRPAREN) return(error("Right paranthese is not found"));
       18:  434:      printf("%s ",token_str[token]);
       18:  435:      token = Scan();
       18:  436:      break;
        2:  437:    default:
        2:  438:      return(error("Factor is not found"));
        -:  439:  }
     1086:  440:  return(NORMAL);
        -:  441:}
        -:  442:
      100:  443:int parse_constant(void){
      100:  444:  switch(token){
       22:  445:    case TNUMBER:
       22:  446:      printf("%d", num_attr);
       22:  447:      token = Scan();
       22:  448:      break;
       22:  449:    case TFALSE:
       22:  450:      printf("%s", token_str[token]);
       22:  451:      token = Scan();
       22:  452:      break;
       22:  453:    case TTRUE:
       22:  454:      printf("%s", token_str[token]);
       22:  455:      token = Scan();
       22:  456:      break;
       34:  457:    case TSTRING:
       34:  458:      printf("\'%s\'", string_attr);
       34:  459:      token = Scan();
       34:  460:      break;
    #####:  461:    default:
    #####:  462:      return(error("Constant is not found"));
        -:  463:  }
      100:  464:  return(NORMAL);
        -:  465:}
        -:  466:
       84:  467:int parse_multiplicative_operator(void){
       84:  468:  switch(token){
       28:  469:    case TSTAR:
       28:  470:      printf(" %s ",token_str[token]);
       28:  471:      token = Scan();
       28:  472:      return(NORMAL);
        -:  473:      break;
       28:  474:    case TDIV:
       28:  475:      printf(" %s ",token_str[token]);
       28:  476:      token = Scan();
       28:  477:      return(NORMAL);
        -:  478:      break;
       28:  479:    case TAND:
       28:  480:      printf(" %s ",token_str[token]);
       28:  481:      token = Scan();
       28:  482:      return(NORMAL);
        -:  483:      break;
    #####:  484:    default:
    #####:  485:      return(error("Multiplicative operator is not found"));
        -:  486:  }
        -:  487:  return(NORMAL);
        -:  488:}
        -:  489:
      174:  490:int parse_additive_operator(void){
      174:  491:  switch(token){
       98:  492:    case TPLUS:
       98:  493:      printf(" %s ",token_str[token]);
       98:  494:      token = Scan();
       98:  495:      return(NORMAL);
        -:  496:      break;
       52:  497:    case TMINUS:
       52:  498:      printf(" %s ",token_str[token]);
       52:  499:      token = Scan();
       52:  500:      return(NORMAL);
        -:  501:      break;
       24:  502:    case TOR:
       24:  503:      printf(" %s ",token_str[token]);
       24:  504:      token = Scan();
       24:  505:      return(NORMAL);
        -:  506:      break;
    #####:  507:    default:
    #####:  508:      return(error("additive operator is not found"));
        -:  509:  }
        -:  510:  return(NORMAL);
        -:  511:}
        -:  512:
      172:  513:int parse_relational_operator(void){
      172:  514:  switch(token){
       32:  515:    case TEQUAL:
       32:  516:      printf(" %s ",token_str[token]);
       32:  517:      token = Scan();
       32:  518:      return(NORMAL);
        -:  519:      break;
       28:  520:    case TNOTEQ:
       28:  521:      printf(" %s ",token_str[token]);
       28:  522:      token = Scan();
       28:  523:      return(NORMAL);
        -:  524:      break;
       28:  525:    case TLE:
       28:  526:      printf(" %s ",token_str[token]);
       28:  527:      token = Scan();
       28:  528:      return(NORMAL);
        -:  529:      break;
       28:  530:    case TLEEQ:
       28:  531:      printf(" %s ",token_str[token]);
       28:  532:      token = Scan();
       28:  533:      return(NORMAL);
        -:  534:      break;
       28:  535:    case TGR:
       28:  536:      printf(" %s ",token_str[token]);
       28:  537:      token = Scan();
       28:  538:      return(NORMAL);
        -:  539:      break;
       28:  540:    case TGREQ:
       28:  541:      printf(" %s ",token_str[token]);
       28:  542:      token = Scan();
       28:  543:      return(NORMAL);
        -:  544:      break;
    #####:  545:    default:
    #####:  546:      return(error("Relational operator is not found"));
        -:  547:  }
        -:  548:  return(NORMAL);
        -:  549:}
        -:  550:
       32:  551:int parse_input_statement(void){
       32:  552:  if(token == TREAD){
       18:  553:    printf("%s ",token_str[token]);
       18:  554:    token = Scan();
       14:  555:  }else if(token == TREADLN){
       14:  556:    printf("%s ",token_str[token]);
       14:  557:    token = Scan();
        -:  558:  }else{
    #####:  559:    return(error("Keyword 'read' or 'readln' is not found"));
        -:  560:  }
       32:  561:  if(token == TLPAREN){
       32:  562:    printf("%s ",token_str[token]);
       32:  563:    token = Scan();
      32*:  564:    if(parse_variable() == ERROR) return(ERROR);
       62:  565:    while(token == TCOMMA){
       32:  566:      printf("%s ",token_str[token]);
       32:  567:      token = Scan();
       32:  568:      if(parse_variable() == ERROR) return(ERROR);
        -:  569:    }
       30:  570:    if(token != TRPAREN) return(error("Right parenthese is not found"));
       28:  571:    printf(" %s",token_str[token]);
       28:  572:    token = Scan();
        -:  573:  }
       28:  574:  return(NORMAL);
        -:  575:}
        -:  576:
        -:  577:
       24:  578:int parse_output_statement(void){
       24:  579:  if(token == TWRITE){
       14:  580:    printf("%s ",token_str[token]);
       14:  581:    token = Scan();
       10:  582:  }else if(token == TWRITELN){
       10:  583:    printf("%s ",token_str[token]);
       10:  584:    token = Scan();
        -:  585:  }else{
    #####:  586:    return(error("Keyword 'write' or 'writeln' is not found"));
        -:  587:  }
       24:  588:  if(token == TLPAREN){
       24:  589:    printf("%s ",token_str[token]);
       24:  590:    token = Scan();
       24:  591:    if(parse_output_format() == ERROR) return(ERROR);
       32:  592:    while(token == TCOMMA){
       12:  593:      printf("%s ",token_str[token]);
       12:  594:      token = Scan();
      12*:  595:      if(parse_output_format() == ERROR) return(ERROR);
        -:  596:    }
       20:  597:    if(token != TRPAREN) return(error("Right paranthese is not found"));
       18:  598:    printf(" %s",token_str[token]);
       18:  599:    token = Scan();
        -:  600:  }
       18:  601:  return(NORMAL);
        -:  602:}
        -:  603:
       36:  604:int parse_output_format(void){
       36:  605:  if(token == TSTRING){
      12*:  606:    if(parse_constant() == ERROR) return(ERROR);
        -:  607:  }else{
       24:  608:    if(parse_expression() == ERROR) return(ERROR);
       22:  609:    if(token == TCOLON){
       14:  610:      printf("%s ",token_str[token]);
       14:  611:      token = Scan();
       14:  612:      if(token != TNUMBER) return(error("Unsigned integer is not found"));
       12:  613:      printf("%d",num_attr);
       12:  614:      token = Scan();
        -:  615:    }
        -:  616:  }
       32:  617:  return(NORMAL);
        -:  618:}
        -:  619:
       40:  620:int parse_empty_statement(void){
       40:  621:  return(NORMAL);
        -:  622:}
        -:  623:
     1366:  624:void print_indent(int ic){
     1366:  625:  printf("\n");
     5127:  626:  for(int i=0;i<ic;i++){
     3761:  627:    printf("   |");
        -:  628:  }
     1366:  629:}
